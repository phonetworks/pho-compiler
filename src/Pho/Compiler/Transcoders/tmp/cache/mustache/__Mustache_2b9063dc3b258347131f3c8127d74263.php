<?php

class __Mustache_2b9063dc3b258347131f3c8127d74263 extends Mustache_Template
{
    private $lambdaHelper;

    public function renderInternal(Mustache_Context $context, $indent = '')
    {
        $this->lambdaHelper = new Mustache_LambdaHelper($this->mustache, $context);
        $buffer = '';
        $blocksContext = array();

        $buffer .= $indent . '<?php
';
        $buffer .= $indent . '
';
        $buffer .= $indent . 'use Pho\\Framework;
';
        $buffer .= $indent . 'use Pho\\Kernel\\Kernel;
';
        $buffer .= $indent . 'use Pho\\Kernel\\Traits;
';
        $buffer .= $indent . '
';
        $value = $this->resolveValue($context->find('pretext'), $context);
        $buffer .= $indent . htmlspecialchars($value, 2, 'UTF-8');
        $buffer .= '
';
        $buffer .= $indent . '
';
        $buffer .= $indent . '/*****************************************************
';
        $buffer .= $indent . ' * This file was auto-generated by pho-compiler
';
        $buffer .= $indent . ' * For more information, visit http://phonetworks.org
';
        $buffer .= $indent . ' ******************************************************/
';
        $buffer .= $indent . '
';
        $buffer .= $indent . 'class ';
        $value = $this->resolveValue($context->find('class_name'), $context);
        $buffer .= htmlspecialchars($value, 2, 'UTF-8');
        $buffer .= ' extends ';
        $value = $this->resolveValue($context->find('extends'), $context);
        $buffer .= htmlspecialchars($value, 2, 'UTF-8');
        $buffer .= ' {
';
        $buffer .= $indent . '
';
        // 'traits' section
        $value = $context->find('traits');
        $buffer .= $this->section83901d3cbb88ce9259c1984f5025ab5b($context, $indent, $value);
        $buffer .= $indent . '    
';
        $buffer .= $indent . '    const DEFAULT_MOD = ';
        $value = $this->resolveValue($context->find('mod'), $context);
        $buffer .= htmlspecialchars($value, 2, 'UTF-8');
        $buffer .= ';
';
        $buffer .= $indent . '    const DEFAULT_MASK = ';
        $value = $this->resolveValue($context->find('mask'), $context);
        $buffer .= htmlspecialchars($value, 2, 'UTF-8');
        $buffer .= ';
';
        $buffer .= $indent . '
';
        $buffer .= $indent . '    const EDGES_IN = [';
        $value = $this->resolveValue($context->find('incoming_edges'), $context);
        $buffer .= htmlspecialchars($value, 2, 'UTF-8');
        $buffer .= '];
';
        $buffer .= $indent . '
';
        $buffer .= $indent . '    public function __construct(Kernel $kernel, Framework\\Actor $actor, Framework\\ContextInterface $context)
';
        $buffer .= $indent . '    {
';
        $buffer .= $indent . '        parent::__construct($actor, $context);
';
        $buffer .= $indent . '        $this->loadNodeTrait($kernel);
';
        $buffer .= $indent . '    }
';
        $buffer .= $indent . '
';
        $buffer .= $indent . '}
';
        $buffer .= $indent . '
';
        $buffer .= $indent . '/*****************************************************
';
        $buffer .= $indent . ' * Timestamp: ';
        $value = $this->resolveValue($context->find('compilation_timestamp'), $context);
        $buffer .= htmlspecialchars($value, 2, 'UTF-8');
        $buffer .= '
';
        $buffer .= $indent . ' * Size (in bytes): ';
        $value = $this->resolveValue($context->find('size_in_bytes'), $context);
        $buffer .= htmlspecialchars($value, 2, 'UTF-8');
        $buffer .= '
';
        $buffer .= $indent . ' * Compilation Time: ';
        $value = $this->resolveValue($context->find('compilation_time'), $context);
        $buffer .= htmlspecialchars($value, 2, 'UTF-8');
        $buffer .= '
';
        $buffer .= $indent . ' * ';
        $value = $this->resolveValue($context->find('hash'), $context);
        $buffer .= htmlspecialchars($value, 2, 'UTF-8');
        $buffer .= '
';
        $buffer .= $indent . ' ******************************************************/';

        return $buffer;
    }

    private function section83901d3cbb88ce9259c1984f5025ab5b(Mustache_Context $context, $indent, $value)
    {
        $buffer = '';
        $blocksContext = array();
    
        if (!is_string($value) && is_callable($value)) {
            $source = '
    use {{ . }}
    ';
            $result = call_user_func($value, $source, $this->lambdaHelper);
            if (strpos($result, '{{') === false) {
                $buffer .= $result;
            } else {
                $buffer .= $this->mustache
                    ->loadLambda((string) $result)
                    ->renderInternal($context);
            }
        } elseif (!empty($value)) {
            $values = $this->isIterable($value) ? $value : array($value);
            foreach ($values as $value) {
                $context->push($value);
                
                $buffer .= $indent . '    use ';
                $value = $this->resolveValue($context->last(), $context);
                $buffer .= htmlspecialchars($value, 2, 'UTF-8');
                $buffer .= '
';
                $context->pop();
            }
        }
    
        return $buffer;
    }

}
